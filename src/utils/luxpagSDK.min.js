/* eslint-disable */
(function () {
  !(function (a, b) {
    "object" == typeof exports && "undefined" != typeof module
      ? (module.exports = b())
      : "function" == typeof define && define.amd
      ? define(b)
      : ((a =
          "undefined" == typeof globalThis
            ? a || self
            : globalThis).validateRfc = b());
  })(this, function () {
    "use strict";
    var b = {
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        A: 10,
        B: 11,
        C: 12,
        D: 13,
        E: 14,
        F: 15,
        G: 16,
        H: 17,
        I: 18,
        J: 19,
        K: 20,
        L: 21,
        M: 22,
        N: 23,
        "&": 24,
        O: 25,
        P: 26,
        Q: 27,
        R: 28,
        S: 29,
        T: 30,
        U: 31,
        V: 32,
        W: 33,
        X: 34,
        Y: 35,
        Z: 36,
        " ": 37,
        Ñ: 38
      },
      c = function (a) {
        var c = (12 === a.length ? " ".concat(a) : a).slice(0, -1),
          d =
            (11e3 -
              c
                .split("")
                .reverse()
                .reduce(function (a, c, d) {
                  return a + (b[c] || 0) * (d + 2);
                }, 0)) %
            11;
        return 11 == d ? "0" : 10 === d ? "A" : d + "";
      },
      d = [
        "BUEI",
        "BUEY",
        "CACA",
        "CACO",
        "CAGA",
        "CAGO",
        "CAKA",
        "CAKO",
        "COGE",
        "COJA",
        "COJE",
        "COJI",
        "COJO",
        "CULO",
        "FETO",
        "GUEY",
        "JOTO",
        "KACA",
        "KACO",
        "KAGA",
        "KAGO",
        "KOGE",
        "KOJO",
        "KAKA",
        "KULO",
        "MAME",
        "MAMO",
        "MEAR",
        "MEAS",
        "MEON",
        "MION",
        "MOCO",
        "MULA",
        "PEDA",
        "PEDO",
        "PENE",
        "PUTA",
        "PUTO",
        "QULO",
        "RATA",
        "RUIN"
      ],
      e = [
        "DAA020218JY1",
        "EDG811007RB3",
        "LIM0011098G0",
        "LME060822IH5",
        "NFS0103297H5"
      ],
      g = { 12: "company", 13: "person" },
      f = { XEXX010101000: "foreign", XAXX010101000: "generic" },
      h = function (a) {
        var b = a.slice(0, -3).slice(-6),
          c = b.slice(0, 2),
          d = b.slice(2, 4),
          e = b.slice(4, 6),
          f = new Date("20".concat(c, "-").concat(d, "-").concat(e));
        return !isNaN(f.getTime());
      },
      i = function (a) {
        var b = a.slice(-1);
        return c(a) === b;
      },
      j = function (a) {
        var b = (a || "").slice(0, 4);
        return d.includes(b);
      },
      a = function (a) {
        return a in f;
      },
      k = function (a) {
        return e.includes(a);
      },
      l = function (a) {
        return f[a] || g[a.length] || null;
      };
    return function (b, c) {
      var d = (function (a) {
          return (a + "")
            .trim()
            .toUpperCase()
            .replace(/[^0-9A-ZÑ\x26]/g, "");
        })(b),
        e = (function (b) {
          var c = (
            1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {}
          ).omitVerificationDigit;
          if (a(b) || k(b)) return [];
          var d = [],
            e = /^([A-ZÑ\x26]{3,4})([0-9]{6})([A-Z0-9]{3})$/.test(b),
            g = !e || h(b),
            f = !e || i(b);
          return (
            e || d.push("INVALID_FORMAT"),
            g || d.push("INVALID_DATE"),
            f || c || d.push("INVALID_VERIFICATION_DIGIT"),
            j(b) && d.push("FORBIDDEN_WORD"),
            d
          );
        })(d, c);
      return 0 === e.length
        ? (function (a) {
            return { isValid: !0, rfc: a, type: l(a) };
          })(d)
        : (function (a) {
            return { isValid: !1, rfc: null, type: null, errors: a };
          })(e);
    };
  }),
    (window.luxpagSDK = new (function () {
      (this.formatId = function (a, b) {
        const c = {
          MEX: /^([a-zA-Z]{1,4})(\d{0,6})([a-zA-Z0-9]{0,3})/,
          CHL: /^(\d{1,8})([0-9Kk]{0,1})/,
          COL: /^(\d{1,10})/,
          PER: /^(\d{1,11})/,
          ECU: /^(\d{1,13})/,
          BRA: {
            CPF: /^(\d{1,3})(\d{0,3})(\d{0,3})(\d{0,2})/,
            CNPJ: /^(\d{2})(\d{3})(\d{3})(000[12])(\d{0,2})/
          },
          PAN: /^(\d{1})(\d{0,3})(\d{0,2})/,
          CRI: /^(\d{1})(\d{0,4})(\d{0,4})/,
          SLV: /^(\d{1,8})(\d{0,1})/,
          GTM: /^(\d{1,8})(\d{0,1})/,
          NIC: /^(\d{1})(\d{0,3})(\d{0,2})/
        };
        var d,
          e = "CPF",
          f = (a + "")?.replace(/[^a-zA-Z0-9]/g, "");
        return (
          "BRA" === b
            ? 11 < f.length &&
              f?.match(c[b].CNPJ) &&
              11 < f?.match(c[b].CNPJ)[0]
              ? ((d = f?.match(c[b].CNPJ)), (e = "CNPJ"))
              : ((d = f?.match(c[b].CPF)), (e = "CPF"))
            : (d = f?.match(c[b])),
          d
            ? "BRA" === b
              ? "CPF" === e
                ? d[1] +
                  (d[2] ? "." + d[2] : "") +
                  (d[2] && d[3] ? "." + d[3] : "") +
                  (d[2] && d[3] && d[4] ? "-" + d[4] : "")
                : d[1] +
                  (d[2] ? "." + d[2] : "") +
                  (d[2] && d[3] ? "." + d[3] : "") +
                  (d[2] && d[3] && d[4] ? "/" + d[4] : "") +
                  (d[2] && d[3] && d[4] && d[5] ? "-" + d[5] : "")
              : "MEX" === b
              ? d[1] +
                (d[2] ? "-" + d[2] : "") +
                (d[2] && d[3] ? "-" + d[3] : "")
              : "CHL" === b
              ? d[1] + (d[2] ? "-" + d[2] : "")
              : "COL" === b
              ? d[1]
              : "PER" === b
              ? d[1]
              : "ECU" === b
              ? d[1]
              : "PAN" === b
              ? d[1] +
                (d[2] ? "-" + d[2] : "") +
                (d[2] && d[3] ? "-" + d[3] : "")
              : "CRI" === b
              ? d[1] +
                (d[2] ? "-" + d[2] : "") +
                (d[2] && d[3] ? "-" + d[3] : "")
              : "SLV" === b
              ? d[1] + (d[2] ? "-" + d[2] : "")
              : "GTM" === b
              ? d[1] + (d[2] ? "-" + d[2] : "")
              : "NIC" === b
              ? d[1] +
                (d[2] ? "-" + d[2] : "") +
                (d[2] && d[3] ? "-" + d[3] : "")
              : ""
            : ""
        );
      }),
        (this.validateId = function (a, b) {
          function c(a) {
            if (
              ((a = (a + "").replace(/[^\d]+/g, "")),
              [
                "00000000000",
                "11111111111",
                "22222222222",
                "33333333333",
                "44444444444",
                "55555555555",
                "66666666666",
                "77777777777",
                "88888888888",
                "99999999999",
                "12345678909"
              ].includes(a))
            )
              return !1;
            for (var b = 0, c = 0; 9 > c; c++)
              b += parseInt(a.charAt(c)) * (10 - c);
            var d = 11 - (b % 11);
            if (((10 == d || 11 == d) && (d = 0), d != parseInt(a.charAt(9))))
              return !1;
            for (b = 0, c = 0; 10 > c; c++)
              b += parseInt(a.charAt(c)) * (11 - c);
            return (
              (d = 11 - (b % 11)),
              (10 == d || 11 == d) && (d = 0),
              d == parseInt(a.charAt(10))
            );
          }
          function d(a) {
            if (
              ((a = (a + "").replace(/[^\d]+/g, "")),
              [
                "00000000000000",
                "11111111111111",
                "22222222222222",
                "33333333333333",
                "44444444444444",
                "55555555555555",
                "66666666666666",
                "77777777777777",
                "88888888888888",
                "99999999999999"
              ].includes(a))
            )
              return !1;
            if ("" == a || 14 != a.length || /^(.)\1+$/.test(a)) return !1;
            for (
              var b = a.length - 2,
                c = a.substring(0, b),
                d = a.substring(b),
                e = 0,
                f = b - 7,
                g = b;
              1 <= g;
              g--
            )
              (e += c.charAt(b - g) * f--), 2 > f && (f = 9);
            var h = 2 > e % 11 ? 0 : 11 - (e % 11);
            if (h != d.charAt(0)) return !1;
            for (
              ++b, c = a.substring(0, b), e = 0, f = b - 7, g = b;
              1 <= g;
              g--
            )
              (e += c.charAt(b - g) * f--), 2 > f && (f = 9);
            return (h = 2 > e % 11 ? 0 : 11 - (e % 11)), h == d.charAt(1);
          }
          if ("BRA" === b)
            return [
              c(a) || d(a),
              (c(a) && "CPF") || (d(a) && "CNPJ") || void 0
            ];
          if ("MEX" === b) {
            let b = ((a ?? "") + "").replace(/[^a-zA-Z0-9]/g, "");
            return [
              validateRfc(b)?.isValid,
              validateRfc(b)?.isValid ? "RFC" : void 0
            ];
          }
          return [
            !0 ===
              {
                MEX: /^([a-zA-Z]{3,4})(\d{6})([a-zA-Z0-9]{3})$/,
                CHL: /^(\d{8})([0-9Kk]{1})$/,
                COL: /^(\d{8,10})$/,
                PER: /^(\d{8}|\d{11})$/,
                ECU: /^(\d{13})$/,
                PAN: /^(\d{1})(\d{3})(\d{2})/,
                CRI: /^(\d{1})(\d{4})(\d{4})/,
                SLV: /^(\d{8})(\d{1})/,
                GTM: /^(\d{8})(\d{1})/,
                NIC: /^(\d{1})(\d{3})(\d{2})/
              }[b]?.test((a + "")?.replace(/[^a-zA-Z0-9]/g, "")),
            {
              MEX: "RFC",
              CHL: "RUT/RUN",
              COL: "NIT/CC",
              PER: "DNI/RUC",
              ECU: "RUC",
              PAN: "CIP",
              CRI: "CDI",
              SLV: "DUI",
              GTM: "DPI",
              NIC: "CIP"
            }[b]
          ];
        }),
        (this.clearData = function (a) {
          return (a + "")?.replace(/[^a-zA-Z0-9]/g, "");
        }),
        (this.validateEmail = function (a) {
          return /^[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$/g.test(
            a + ""
          );
        }),
        (this.validateName = function (a) {
          let b = ((a) => (
            (a = a.replace("\xE1", "a")),
            (a = a.replace("\xE0", "a")),
            (a = a.replace("\xE2", "a")),
            (a = a.replace("\xE3", "a")),
            (a = a.replace("\xC1", "A")),
            (a = a.replace("\xC0", "A")),
            (a = a.replace("\xC3", "A")),
            (a = a.replace("\xE9", "e")),
            (a = a.replace("\xEA", "e")),
            (a = a.replace("\xC9", "E")),
            (a = a.replace("\xCA", "E")),
            (a = a.replace("\xED", "i")),
            (a = a.replace("\xCD", "I")),
            (a = a.replace("\xF3", "o")),
            (a = a.replace("\xF4", "o")),
            (a = a.replace("\xF5", "o")),
            (a = a.replace("\xD3", "O")),
            (a = a.replace("\xD4", "O")),
            (a = a.replace("\xD5", "O")),
            (a = a.replace("\xFA", "u")),
            (a = a.replace("\xDA", "U")),
            (a = a.replace("\xE7", "c")),
            (a = a.replace("\xC7", "C")),
            a
          ))(a + "");
          return /^[a-zA-Z ]+$/.test(b);
        }),
        (this.formatCEP = function (a) {
          let b = ((a ?? "") + "")
            ?.replace(/[^\d]/g, "")
            ?.match(/^([\d]{1,5})([\d]{0,3})/);
          return b ? b[1] + (b[2] ? "-" + b[2] : "") : "";
        }),
        (this.validateCEP = function (a) {
          let b = a ? a + "" : "";
          return /^(\d)(?!\1+$)\d{7}$/.test(b.replace(/[^\d]+/g, ""));
        });
    })());
})();
